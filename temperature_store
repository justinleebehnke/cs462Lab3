ruleset temperature_store {
  meta {
    shares __testing, temperatures, threshold_violations, inrange_temperatures
    provides temperatures, threshold_violations, inrange_temperatures
  }
  global {
    __testing = { "queries":
      [ { "name": "__testing" }
      //, { "name": "entry", "args": [ "key" ] }
      ] , "events":
      [ //{ "domain": "d1", "type": "t1" }
      //, { "domain": "d2", "type": "t2", "attrs": [ "a1", "a2" ] }
      ]
    }
    
    temperatures = function() {
      //A function called temperatures that returns the contents of the temperature entity variable.
      ent:temperatures.defaultsTo([])
    }
    
    threshold_violations = function() {
      //that returns the contents of the threshold violation entity variable.
      ent:violations.defaultsTo([])
    }
    
    inrange_temperatures = function() {
      //returns all the temperatures in the temperature entity variable that aren't in the threshold violation entity variable.
      ent:temperatures.defaultsTo([]).difference(ent:violations.defaultsTo([])).defaultsTo([])
    }
  }
  
  rule collect_temperatures {
    select when wovyn new_temperature_reading
    pre {
      tempF = event:attrs{"temperature"}
      timestamp = event:attrs{"timestamp"}
      entry = {"tempF":tempF, "timestamp":timestamp}
    }
    always {
      ent:temperatures := ent:temperatures.defaultsTo([]).add(entry);
    }
  }
  
  rule collect_threshold_violations {
    select when wovyn threshold_violation
    pre {
      tempF = event:attrs{"temperature"}
      timestamp = event:attrs{"timestamp"}
      entry = {"tempF":tempF, "timestamp":timestamp}
    }
    always {
      ent:violations := ent:violations.defaultsTo([]).add(entry);
    }
  }
  
  rule clear_temperatures {
    select when sensor reading_reset
    always {
      ent:violations := ent:violations.defaultsTo([]);
      ent:temperatures := ent:temperatures.defaultsTo([]);
      clear ent:violations;
      clear ent:temperatures;
    }
  }
}
